# This workflow builds multiple versions of the build

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Set up the docker base info
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-x64-arm64:
    runs-on: ubuntu-latest

    # allow access to github docker registry
    permissions:
      contents: read
      packages: write

    steps:
      # Checkout the code
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # figure out what version this should be
      - name: get the current dynamic git version numbers
        id: get_versions
        run: |
          git clone https://github.com/xcape-inc/ci-tools.git --branch main --single-branch .git/ci-tools
          . .git/ci-tools/get_tag_from_git.sh > /dev/null
          echo "cur_version=${CUR_VERSION}" >> $GITHUB_OUTPUT
          echo "long_form_cur_version=${LONG_FORM_CUR_VERSION}" >> $GITHUB_OUTPUT
          BUILD_VER=$(printf '%s' "${CUR_VERSION}" | sed "s/^v\\([0-9.]*\\)\\(.*\\)/\\1-\\2/" | sed "s/\\(\\.*\\)-\$//")
          echo "build_version=${BUILD_VER}" >> $GITHUB_OUTPUT

      # displaye the detected version info
      - name: show version
        run: |
          echo Short version: ${{ steps.get_versions.outputs.cur_version }}
          echo Long version: ${{ steps.get_versions.outputs.long_form_cur_version }}
          echo Build version: ${{ steps.get_versions.outputs.build_version }}

      # the commit short sha is the main tag for the artifact as it can be directly traced to the git commit
      - name: Set short sha
        id: shortsha
        run: echo "sha_short=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      # figure out if we are on a branch; that can be used to tage the image too
      - name: Extract branch name
        id: extract_branch
        shell: bash
        run: echo "branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT

      # display the captured branch name
      - name: Current branch
        run: echo ${{ steps.extract_branch.outputs.branch }}

      # Add support for more platforms with QEMU (optional)
      # https://github.com/docker/setup-qemu-action
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          # Add whatever platforms you need in addition to x86_64
          platforms: 'arm64'

      # configure the docker buildx environment (and use the buildkit engine)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # authenticate to Github's docker image repo (ghcr.io)
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Automatically gather details about the image to be built. This will be the branch name and the components of the tag if this is a tag build (eg. 1,1.0,1.0.1)
      # TODO: you would need some more logic if, for example you have a v1 that should point to v1.1.x, but then spin a v1.0.x
      # as that would presently set v1 back to v1.0.x
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          # generate Docker tags based on the following events/attributes
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=semver,pattern={{major}}.{{minor}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=semver,pattern={{major}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=sha
          # TODO: some of these could use github variables
          labels: |
            org.opencontainers.image.ref.name=${{ github.ref }}
      
      # Add some more possible tags. Right now we have commit short-sha, branch name, semver component from the commit tag
      # This adds the value of BUILD_VER from above (eg. 1.0.1a2) and latest is this is the main branch
      - name: Compute image tags
        id: get_image_tags
        shell: bash
        # append the version if on a branch and matches a version tag and append latest if on main branch
        run: |
          TAGS="${{ steps.meta.outputs.tags }}"
          TAGS=$(ARRAY=( $(printf '%s' "${TAGS}") ); IFS=","; printf "${ARRAY[*]}")
          if [[ "${GITHUB_REF}" =~ ^refs/heads/ ]]; then
            BUILD_VER="${{ steps.get_versions.outputs.build_version }}"
            PATTERN_MATCHED=$(printf '%s' "${BUILD_VER}" | sed -En "s/^([0-9]+\\.[0-9]+\\.[0-9]+)?.*\$/\\1/p")
            if [[ "${BUILD_VER}" == "${PATTERN_MATCHED}" ]]; then
              BUILD_MINOR_VER=$(printf '%s' "${BUILD_VER}" | sed -En "s/^([0-9]+\\.[0-9]+)?.*\$/\\1/p")
              BUILD_MAJOR_VER=$(printf '%s' "${BUILD_VER}" | sed -En "s/^([0-9]+)?.*\$/\\1/p")
              TAGS="${TAGS},${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${BUILD_VER},${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${BUILD_MAJOR_VER},${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${BUILD_MINOR_VER}"
            fi
            if [[ 'main' == "${{ steps.extract_branch.outputs.branch }}" ]]; then
              TAGS="${TAGS},${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
            fi
          fi
          echo "tags=${TAGS}" >> $GITHUB_OUTPUT

      # display the tags we will use
      - name: Show docker tags
        run: |
          echo "docker image tags: ${{ steps.get_image_tags.outputs.tags }}"

      # build the images
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile
          pull: true
          push: true
          # Add whatever platforms you need
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=ghcr.io/${{ env.IMAGE_NAME }}-cache
          cache-to: type=registry,ref=ghcr.io/${{ env.IMAGE_NAME }}-cache,mode=max
          build-args: |
            VERSION=${{ steps.get_versions.outputs.cur_version }}
            LONG_FORM_VERSION=${{ steps.get_versions.outputs.long_form_cur_version }}
            
      - name: Run Snyk to check Docker image for vulnerabilities
        # Snyk can be used to break the build when it detects vulnerabilities.
        # In this case we want to upload the issues to GitHub Code Scanning
        #continue-on-error: true
        uses: snyk/actions/docker@14818c4695ecc4045f33c9cee9e795a788711ca4
        env:
          # In order to use the Snyk Action you will need to have a Snyk API token.
          # More details in https://github.com/snyk/actions#getting-your-snyk-token
          # or you can signup for free at https://snyk.io/login
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${{ steps.shortsha.outputs.sha_short }}
          args: --file=Dockerfile

      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk.sarif

    # store these valus in case another stage is added to run afterwards, such as to use the image for some purpose
    outputs:
      cur_version: ${{ steps.get_versions.outputs.cur_version }}
      long_form_cur_version: ${{ steps.get_versions.outputs.long_form_cur_version }}
